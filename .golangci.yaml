# This file contains all available configuration options
# with their default values.
# https://golangci-lint.run/docs/configuration/file/

version: "2"

# options for analysis running
run:
  # default concurrency is a available CPU number
  # concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 5m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # list of build tags, all linters use it. Default is empty list.
  # build-tags:
  #   - mytag


  # default is true. Enables skipping of directories:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work
  # on Windows.
  # skip-files:
  #   - ".*\\.my\\.go$"
  #   - lib/bad.go

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  # modules-download-mode: vendor

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: false

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  formats: 
    text:
      print-linter-name: true
      print-issued-lines: true
      colors: true


  # add a prefix to the output file references; default is no prefix
  path-prefix: ""

  # Sort results by: filepath, line and column.
  sort-order: 
    - linter
    - severity
    - file


formatters:
  enable:
    - gci
    - golines
  settings:
    golines:
      max-len: 100
      tab-len: 4
      shorten-comments: false
      reformat-tags: true
      chain-split-dots: true
# all available settings of specific linters
linters:
  settings:
    dogsled:
      # checks assignments with too many blank identifiers; default is 2
      max-blank-identifiers: 2
    dupl:
      # tokens count to trigger issue, 150 by default
      threshold: 300
    errcheck:
      # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
      # default is false: such cases aren't reported by default.
      check-type-assertions: true

      # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
      # default is false: such cases aren't reported by default.
      check-blank: true

    exhaustive:
      # indicates that switch statements are to be considered exhaustive if a
      # 'default' case is present, even if all enum members aren't listed in the
      # switch
      default-signifies-exhaustive: true
    funlen:
      lines: 60
      statements: 40
    # gci:
    # put imports beginning with prefix after 3rd-party packages;
    # only support one prefix
    # if not set, use goimports.local-prefixes
    # local-prefixes: github.com/org/project
    gocognit:
      # minimal code complexity to report, 30 by default (but we recommend 10-20)
      min-complexity: 10
    nestif:
      # minimal complexity of if statements to report, 5 by default
      min-complexity: 4
    goconst:
      # minimal length of string constant, 3 by default
      min-len: 3
      # minimal occurrences count to trigger, 3 by default
      min-occurrences: 3
    gocritic:
      # Which checks should be enabled; can't be combined with 'disabled-checks';
      # See https://go-critic.github.io/overview#checks-overview
      # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`
      # By default list of stable checks is used.

      # Which checks should be disabled; can't be combined with 'enabled-checks'; default is empty
      disabled-checks:
        - regexpMust

      # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
      # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
      enabled-tags:
        - performance
      disabled-tags:
        - experimental

      settings: # settings passed to gocritic
        captLocal: # must be valid enabled check name
          paramsOnly: true
    gocyclo:
      # minimal code complexity to report, 30 by default (but we recommend 10-20)
      min-complexity: 10
    godot:
      # check all top-level comments, not only declarations
      scope: all
    godox:
      # report any comments starting with keywords, this is useful for TODO or FIXME comments that
      # might be left in the code accidentally and should be resolved before merging
      keywords: # default keywords are TODO, BUG, and FIXME, these can be overwritten by this setting
        - NOTE
        - OPTIMIZE # marks code that should be optimized before merging
        - HACK # marks hack-arounds that should be removed before merging

      # packages:
      # packages-with-error-message:
      # specify an error message to output when a blacklisted package is used
      # - github.com/sirupsen/logrus: "logging is allowed only by logutils.Log"
    lll:
      # max line length, lines longer will be reported. Default is 120.
      # '\t' is counted as 1 character by default, and can be changed with the tab-width option
      line-length: 120
      # tab width in spaces. Default to 1.
      tab-width: 1

    misspell:
      # Correct spellings using locale preferences for US or UK.
      # Default is to use a neutral variety of English.
      # Setting locale to US will correct the British spelling of 'colour' to 'color'.
      locale: UK

    nakedret:
      # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
      max-func-lines: 30
    prealloc:
      # XXX: we don't recommend using this linter before doing performance profiling.
      # For most programs usage of prealloc will be a premature optimization.

      # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
      # True by default.
      simple: true
      range-loops: true # Report preallocation suggestions on range loops, true by default
      for-loops: true # Report preallocation suggestions on for loops, false by default
    nolintlint:
      # Enable to ensure that nolint directives are all used. Default is true.
      allow-unused: false
      # Exclude following linters from requiring an explanation.  Default is [].
      allow-no-explanation: ["lll"]
      # Enable to require an explanation of nonzero length after each nolint directive. Default is false.
      require-explanation: true
      # Enable to require nolint directives to mention the specific linter being suppressed. Default is false.
      require-specific: true

    testpackage:
      # regexp pattern to skip files
      skip-regexp: (export|internal)_test\.go
    unparam:
      # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
      # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
      # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
      # with golangci-lint call it on a directory with the changed file.
      check-exported: false
      # treat code as a program (not a library) and report unused exported identifiers; default is false.
      # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
      # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
      # with golangci-lint call it on a directory with the changed file.
    whitespace:
      multi-if: false # Enforces newlines (or comments) after every multi-line if statement
      multi-func: false # Enforces newlines (or comments) after every multi-line function signature
    wsl_v5:
      allow-first-in-block: true
      allow-whole-block: false
      branch-max-lines: 2
      enable:
        - err

    errorlint:
      # Report non-wrapping error creation using fmt.Errorf
      errorf: true
    maintidx:
      # Show functions with maintainability index lower than N.
      # A high index indicates better maintainability (it's kind of the opposite of complexity).
      # Default: 20
      under: 20
    grouper:
      # Require the use of a single global 'const' declaration only.
      # Default: false
      const-require-single-const: false
      # Require the use of grouped global 'const' declarations.
      # Default: false
      const-require-grouping: false
      # Require the use of a single 'import' declaration only.
      # Default: false
      import-require-single-import: false
      # Require the use of grouped 'import' declarations.
      # Default: false
      import-require-grouping: false
      # Require the use of a single global 'type' declaration only.
      # Default: false
      type-require-single-type: false
      # Require the use of grouped global 'type' declarations.
      # Default: false
      type-require-grouping: false
      # Require the use of a single global 'var' declaration only.
      # Default: false
      var-require-single-var: false
      # Require the use of grouped global 'var' declarations.
      # Default: false
      var-require-grouping: false
    errchkjson:
      # With check-error-free-encoding set to true, errchkjson does warn about errors
      # from json encoding functions that are safe to be ignored,
      # because they are not possible to happen.
      #
      # if check-error-free-encoding is set to true and errcheck linter is enabled,
      # it is recommended to add the following exceptions to prevent from false positives:
      #
      #     linters-settings:
      #       errcheck:
      #         exclude-functions:
      #           - encoding/json.Marshal
      #           - encoding/json.MarshalIndent
      #
      # Default: false
      check-error-free-encoding: true
      # Issue on struct encoding that doesn't have exported fields.
      # Default: false
      report-no-exported: false
    decorder:
      # Required order of `type`, `const`, `var` and `func` declarations inside a file.
      # Default: types before constants before variables before functions.
      dec-order:
        - type
        - const
        - var
        - func
      # If true, order of declarations is not checked at all.
      # Default: true (disabled)
      disable-dec-order-check: false
      # If true, `init` func can be anywhere in file (must not be declared before all other functions).
      # Default: true (disabled)
      disable-init-func-first-check: false
      # If true, multiple global `type`, `const` and `var` declarations are allowed.
      # Default: true (disabled)
      disable-dec-num-check: false
    varnamelen:
      ignore-type-assert-ok : true
      ignore-map-index-ok: true
      ignore-chan-recv-ok: true
      ignore-decls:
        - t testing.T
        - w http.ResponseWriter
        - r *http.Request
        - o metric.Observer
  
  exclusions:
    generated: strict
    presets:
      - comments
      - std-error-handling
      - common-false-positives
    warn-unused: true
    rules:
      # Exclude some linters from running on tests files.
      - path: _test\.go
        linters:
          - gocyclo
          - errcheck
          - dupl
          - funlen
        # Exclude gochecknoglobals issues for sync.Once
      - linters:
          - gochecknoglobals
        source: ".* sync.Once"

      # Exclude lll issues for long lines with go:generate
      - linters:
          - lll
        source: "^//go:generate "



  enable:
    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    - containedctx
    - contextcheck
    - copyloopvar
    - cyclop
    - decorder
    - dogsled
    - dupl
    - dupword
    - durationcheck
    - err113
    - errcheck
    - errchkjson
    - errname
    - errorlint
    - exhaustive
    - exptostd
    - forbidigo
    - forcetypeassert
    - funlen
    - gocheckcompilerdirectives
    - gochecknoglobals
    - gochecknoinits
    - gochecksumtype
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godot
    - godox
    - goheader
    - gomoddirectives
    - goprintffuncname
    - gosec
    - gosmopolitan
    - govet
    - grouper
    - iface
    - importas
    - inamedparam
    - ineffassign
    - interfacebloat
    - intrange
    - ireturn
    - lll
    - loggercheck
    - maintidx
    - makezero
    - mirror
    - misspell
    - mnd
    - musttag
    - nakedret
    - nestif
    - nilerr
    - nilnil
    - nilnesserr
    - nlreturn
    - noctx
    - nolintlint
    - nonamedreturns
    - nosprintfhostport
    - paralleltest
    - perfsprint
    - prealloc
    - predeclared
    - promlinter
    - protogetter
    - reassign
    - recvcheck
    - revive
    - rowserrcheck
    - sloglint
    - spancheck
    - sqlclosecheck
    - staticcheck
    - tagalign
    - testableexamples
    - testifylint
    - testpackage
    - thelper
    - tparallel
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - usetesting
    - varnamelen
    - wastedassign
    - whitespace
    - wrapcheck
    - wsl_v5



issues:
  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: false

  # Fix found issues (if it's supported by the linter)
  fix: false

  # Show only new issues created after git revision `REV`
  # new-from-rev: REV

  # Show only new issues created in git patch with set file path.
  # new-from-patch: path/to/patch/file

severity:
  default: error


  rules:
    - linters:
        - dupl
      severity: info
