package sshush

import (
	"fmt"
	"log/slog"
	"os"
	"strings"

	"github.com/k0kubun/pp/v3"
)

type (
	sshConfigSources []string

	Runner struct {
		Sources     sshConfigSources
		Destination string
	}
)

func (s *Runner) Run(verbose bool, debug bool, version string) error {
	if verbose {
		slog.Info(
			"sshush v"+version+" running with",
			"sources", s.Sources,
			"destination", s.Destination,
		)
	}

	fh, err := os.Create(s.Destination)
	if err != nil {
		return fmt.Errorf("opening destination file: %w", err)
	}

	defer fh.Close()

	nh, err := s.writeHeaders(fh, version)
	if err != nil {
		return fmt.Errorf("writing headers: %w", err)
	}

	p := Parser{
		Verbose: verbose,
		Debug:   debug,
	}

	err = p.Load(&s.Sources)
	if err != nil {
		return fmt.Errorf("loading sources: %w", err)
	}

	output, err := p.ProduceConfig()
	if err != nil {
		return fmt.Errorf("producing config: %w", err)
	}

	if debug {
		pp.Println("Global config: ", p.GlobalConfig)
		pp.Println("Default config: ", p.DefaultConfig)
		pp.Println("Extensions: ", p.Extensions)
	}

	output = removeTrailingEmptyLine(output)

	n, err := writeLines(fh, output)
	if err != nil {
		return fmt.Errorf("writing output: %w", err)
	}

	if verbose {
		slog.Info(fmt.Sprintf("Wrote %d bytes to %s", nh+n, s.Destination))
	}

	return nil
}

// writeHeaders writes the headers to the file handle.
// It returns the number of bytes written and an error, if any.
func (s *Runner) writeHeaders(fh *os.File, version string) (int, error) {
	n, err := writeLines(
		fh,
		[]string{
			"# Generated by sshush v" + version,
			"# From " + strings.Join(s.Sources, ", "),
			"",
		},
	)

	if err != nil {
		return n, fmt.Errorf("writing headers: %w", err)
	}

	return n, nil
}

// writeLines writes a map of lines to the file handle.
// It returns the number of bytes written and an error, if any.
func writeLines(fh *os.File, lines []string) (int, error) {
	n := 0
	for _, line := range lines {
		nL, err := writeLine(fh, line)
		if err != nil {
			return n, err
		}
		n += nL
	}
	return n, nil
}

// writeLine writes a line to the file handle.
// It returns the number of bytes written and an error, if any.
func writeLine(fh *os.File, line string) (int, error) {
	n, err := fh.WriteString(line + "\n")
	if err != nil {
		return n, fmt.Errorf("writing line: %w", err)
	}

	return n, nil
}

// removeTrailingEmptyLine removes the last empty line from the output.
// There's already a trailing newline so this prevents double new lines.
func removeTrailingEmptyLine(output []string) []string {
	length := len(output)

	if length >= 1 && output[length-1] == "" {
		output = output[:length-1]
	}

	return output
}
