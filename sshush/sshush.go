package sshush

import (
	"bufio"
	"errors"
	"fmt"
	"io"
	"log/slog"
	"os"
	"slices"
	"strings"

	"github.com/k0kubun/pp/v3"
	"github.com/mongodb-forks/go-difflib/difflib"
)

type (
	SshConfigSources []string

	Runner struct {
		Sources     SshConfigSources
		Destination string
		Out         io.Writer
	}
)

var (
	ErrLoadingSources  = errors.New("loading sources")
	ErrProducingConfig = errors.New("producing config")
)

func (s *Runner) Run(verbose bool, debug bool, dryRun bool, version string) error {
	pp.SetDefaultOutput(s.Out)

	if verbose {
		slog.Info(
			"sshush v"+version+" running with",
			"sources", s.Sources,
			"destination", s.Destination,
		)
	}

	parser := Parser{
		Verbose: verbose,
		Debug:   debug,
		DryRun:  dryRun,
	}

	sources, err := parser.OrderSources(&s.Sources)
	if err != nil {
		return fmt.Errorf("%w: %w", ErrLoadingSources, err)
	}

	err = parser.Load(sources)
	if err != nil {
		return fmt.Errorf("%w: %w", ErrLoadingSources, err)
	}

	output, err := parser.ProduceConfig()
	if err != nil {
		return fmt.Errorf("%w: %w", ErrProducingConfig, err)
	}

	if debug {
		_, _ = pp.Println("Global config: ", parser.GlobalConfig)
		_, _ = pp.Println("Default config: ", parser.DefaultConfig)
		_, _ = pp.Println("Extensions: ", parser.Extensions)
	}

	output = removeTrailingEmptyLine(output)

	headers := []string{
		"# Generated by sshush v" + version,
		"# From " + strings.Join(s.Sources, ", "),
		"",
	}

	newConfig := slices.Concat(headers, output)

	if dryRun {
		err = s.dryRun(newConfig)
		if err != nil {
			return fmt.Errorf("dryRun: %w", err)
		}

		return nil
	}

	err = s.writeRun(verbose, newConfig)
	if err != nil {
		return err
	}

	return nil
}

func (s *Runner) writeRun(verbose bool, newConfig []string) error {
	// Open but don't truncate - create if not exists, but open for read/write
	configFh, err := os.OpenFile(s.Destination, os.O_RDWR|os.O_CREATE, 0o666)
	if err != nil {
		return fmt.Errorf("opening destination file: %w", err)
	}
	defer configFh.Close()

	// Check if the file has a generated by sshush header.
	// If it wasn't, make a backup.
	err = s.backupDestinationFileIfNotSshushGenerated(configFh)
	if err != nil {
		return fmt.Errorf("backup destination file: %w", err)
	}

	err = configFh.Truncate(0)
	if err != nil {
		return fmt.Errorf("truncating destination file: %w", err)
	}

	// Move the file pointer to the start.
	_, err = configFh.Seek(0, 0)
	if err != nil {
		return fmt.Errorf("seeking to start of file: %w", err)
	}

	bytesWritten, err := writeLines(configFh, newConfig)
	if err != nil {
		return fmt.Errorf("writing output: %w", err)
	}

	if verbose {
		slog.Info(fmt.Sprintf("Wrote %d bytes to %s", bytesWritten, s.Destination))
	}

	return nil
}

func (s *Runner) backupDestinationFileIfNotSshushGenerated(configFh *os.File) error {
	scanner := bufio.NewScanner(configFh)
	_ = scanner.Scan()
	headerLine := scanner.Text()

	// Reset file pointer to start.
	_, err := configFh.Seek(0, 0)
	if err != nil {
		return fmt.Errorf("seeking file: %w", err)
	}

	if !strings.HasPrefix(headerLine, "# Generated by sshush") {
		_, _ = pp.Println(
			fmt.Sprintf("Existing config wasn't generated by sshush. Creating a backup file: %s",
				s.Destination+".bak",
			),
		)

		backupFile, err := os.Create(s.Destination + ".bak")
		if err != nil {
			return fmt.Errorf("creating backup file: %w", err)
		}
		defer backupFile.Close()

		_, err = io.Copy(backupFile, configFh)
		if err != nil {
			return fmt.Errorf("writing backup file: %w", err)
		}
	}

	return nil
}

func (s *Runner) dryRun(newConfig []string) error {
	contents, err := os.ReadFile(s.Destination)
	if err != nil && !os.IsNotExist(err) {
		return fmt.Errorf("reading destination file: %w", err)
	}

	oldConfig := ""

	if !os.IsNotExist(err) {
		lines := strings.Split(string(contents), "\n")
		oldConfig = strings.Join(removeTrailingEmptyLine(lines), "\n")
	}

	diff, err := prettyDiff(oldConfig, strings.Join(newConfig, "\n"), s.Destination)
	if err != nil {
		return fmt.Errorf("creating diff: %w", err)
	}

	_, err = fmt.Fprintln(s.Out, diff)
	if err != nil {
		return fmt.Errorf("writing diff to output: %w", err)
	}

	return nil
}

// prettyDiff compares two strings and returns a coloured diff.
func prettyDiff(oldConfig, newConfig, file string) (string, error) {
	diff := difflib.LineDiffParams{
		A:        difflib.SplitLines(oldConfig),
		B:        difflib.SplitLines(newConfig),
		FromFile: file + " (Old)",
		ToFile:   file + " (New)",
		//nolint:mnd // Number of context lines for the diff.
		Context: 3,
		Colored: true,
	}

	diffResult, err := difflib.GetUnifiedDiffString(diff)
	if err != nil {
		return "", fmt.Errorf("getting diff result: %w", err)
	}

	return diffResult, nil
}

// writeLines writes a map of lines to the file handle.
// It returns the number of bytes written and an error, if any.
func writeLines(fh *os.File, lines []string) (int, error) {
	bytesWritten := 0

	for _, line := range lines {
		nL, err := writeLine(fh, line)
		if err != nil {
			return bytesWritten, err
		}

		bytesWritten += nL
	}

	return bytesWritten, nil
}

// writeLine writes a line to the file handle.
// It returns the number of bytes written and an error, if any.
func writeLine(fh *os.File, line string) (int, error) {
	n, err := fh.WriteString(line + "\n")
	if err != nil {
		return n, fmt.Errorf("writing line: %w", err)
	}

	return n, nil
}

// removeTrailingEmptyLine removes the last empty line from the output.
// There's already a trailing newline so this prevents double new lines.
func removeTrailingEmptyLine(output []string) []string {
	length := len(output)

	if length >= 1 && output[length-1] == "" {
		output = output[:length-1]
	}

	return output
}
